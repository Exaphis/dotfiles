# vim: filetype=zsh
if (( ${+ENABLE_ZNAP} )); then
    # instead of sourcing .zshrc, use `znap restart`!

    # install znap
    [[ -f ~/zsh-snaps/zsh-snap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/zsh-snaps/zsh-snap

    source ~/zsh-snaps/zsh-snap/znap.zsh
fi

# set prompt
if type "starship" > /dev/null; then
    znap eval starship 'starship init zsh --print-full-init'
else
    {{ if eq .chezmoi.username "wuke" }}
        # --- timing helpers ---------------------------------------------------------
        # $EPOCHREALTIME gives a high-resolution, floating-point Unix timestamp.
        zmodload zsh/datetime

        # called just *before* the command is executed
        preexec() {
          _cmd_start=$EPOCHREALTIME
        }

        # called just *before* the next prompt is displayed
        precmd() {
          if [[ -n $_cmd_start ]]; then
            local _elapsed=$(( EPOCHREALTIME - _cmd_start ))   # float seconds

            # ── µs / ms  ──────────────────────────────────────
            if (( _elapsed < 0.001 )); then                    # < 1 ms  ➜  µs
              local us=$(( _elapsed * 1e6 ))
              local dec=$(( us >= 100 ? 0 : us >= 10 ? 1 : 2 ))   #   ~3 sig-figs
              LAST_CMD_TIME=$(printf "%.*fus " $dec $us)

            elif (( _elapsed < 1 )); then                      # < 1 s   ➜  ms
              local ms=$(( _elapsed * 1e3 ))
              local dec=$(( ms >= 100 ? 0 : ms >= 10 ? 1 : 2 ))
              LAST_CMD_TIME=$(printf "%.*fms " $dec $ms)

            # ── pure seconds (< 1 min) ────────────────────────
            elif (( _elapsed < 60 )); then
              local dec=$(( _elapsed >= 10 ? 1 : 2 ))
              LAST_CMD_TIME=$(printf "%.*fs " $dec $_elapsed)

            # ── ≥ 60 s : work with integer seconds to avoid FP artefacts ──
            else
              local tot=${_elapsed%.*}                 # floor to integer seconds

              if (( tot < 3600 )); then                # < 1 h  ->  mm ss
                local m=$(( tot / 60 ))
                local s=$(( tot % 60 ))
                LAST_CMD_TIME=$(printf "%dm%02ds " $m $s)

              elif (( tot < 86400 )); then             # < 1 d  ->  hh mm
                local h=$(( tot / 3600 ))
                local m=$(( (tot % 3600) / 60 ))
                LAST_CMD_TIME=$(printf "%dh%02dm " $h $m)

              else                                     # ≥ 1 d   ->  dd hh
                local d=$(( tot / 86400 ))
                local h=$(( (tot % 86400) / 3600 ))
                LAST_CMD_TIME=$(printf "%dd%02dh " $d $h)
              fi
            fi
          fi
        }

        # --- prompt -----------------------------------------------------------------
        source /desco/local/share/git/contrib/completion/git-prompt.sh
        setopt PROMPT_SUBST

        export PROMPT='%t '                   # time
        PROMPT+='%F{yellow}${LAST_CMD_TIME:-}%f'            # last command wall time
        PROMPT+='%F{blue}$BASE_DIR:t%f${${BASE_DIR:+ }:-}'  # BASE_DIR
        PROMPT+='%F{green}%n@$HOSTPROMPT%f'   # username@host
        PROMPT+=':'
        PROMPT+='%F{blue}%~%f'                # directory
        PROMPT+='$(__git_ps1 " (%s)")'        # git info
        PROMPT+='%(?..%F{red})$%f '           # colored end string
    {{ else }}
        export PS1="%F{green}%n@%m%f:%F{blue}%~%f%(?..%F{red})$%f "
    {{ end }}
fi


# print irssi unread messages (fnotify)
# must be done before prompt as otherwise it will be overwritten
irc_msgs="$HOME/.irssi/fnotify"
if [[ -f "$irc_msgs" ]]; then
    echo ""
    if [[ -s "$irc_msgs" ]]; then
        echo "There are $(cat "$irc_msgs" | wc -l | awk '{$1=$1;print}') unread IRC messages."
        echo -n "" > "$irc_msgs"
    else
        echo "There are no unread IRC messages."
    fi
fi

# show prompt
if (( ${+ENABLE_ZNAP} )); then
    znap prompt
fi

# Base16 shell initialization
BASE16_SHELL="$HOME/.config/base16-shell/"
BASE16_SHELL_SET_BACKGROUND=false
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

if type "base16_default-dark" > /dev/null; then
    base16_default-dark
fi

# enable history saving
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt HIST_IGNORE_ALL_DUPS
setopt SHARE_HISTORY

# allow cd without typing cd
setopt AUTO_CD

transfer () {
    curl "https://bashupload.com/`basename ${1}`" --data-binary "@${1}"
}

alias vi='vim'

# enable vi mode for the zsh line editor
bindkey -v

# prevent 0.4s delay before entering vi mode (https://old.reddit.com/r/vim/comments/60jl7h/zsh_vimode_no_delay_entering_normal_mode/)
KEYTIMEOUT=1
bindkey '^R' history-incremental-search-backward
bindkey -v '^?' backward-delete-char
bindkey -a '^L' clear-screen

# bare dotfiles setup
function config() {
    if [ "$1" = "status" ]; then
        git --git-dir=$HOME/.dotfiles --work-tree=$HOME status -uno
    elif [ "$1" = "status-all" ]; then
        git --git-dir=$HOME/.dotfiles --work-tree=$HOME status
    else
        git --git-dir=$HOME/.dotfiles --work-tree=$HOME $@
    fi
}

# allow for mkdir and cd in one command
function mkcd() {
  dir="$*";
  mkdir -p "$dir" && cd "$dir";
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
{{ if eq .chezmoi.username "wuke" }}
function zvm_after_init() {
    if command -v fzf-share >/dev/null; then
        source "$(fzf-share)/key-bindings.zsh"
        source "$(fzf-share)/completion.zsh"
    fi
}

source $HOME/zsh/zsh-vi-mode/zsh-vi-mode.plugin.zsh
source $HOME/zsh/zsh-z/zsh-z.plugin.zsh
{{ end }}


# home-specific plugins
if (( ${+ZSH_HOME} )); then
    znap source zsh-users/zsh-syntax-highlighting
fi

# OS-specific commands
case `uname` in
Darwin)
    ln -sf "$HOME/.config/kitty/kitty_macos.conf" "$HOME/.config/kitty/kitty.conf"

    alias ls='ls -G'  # colorful ls
    alias gst='git status'
    alias gd='git diff'

    # jenv
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"

    # n
    export N_PREFIX="$HOME/n"
    export PATH="$HOME/bin:$N_PREFIX/bin:$PATH"  # ensure n's node is picked up first

    # pyenv
    eval "$(pyenv init -)"
    alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'

    # codeql
    export PATH="$HOME/bin/codeql:$PATH"

    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

    # android build tools and platform tools
    export PATH="$HOME/Library/Android/sdk/build-tools/33.0.1:$HOME/Library/Android/sdk/platform-tools:$PATH"
    ;;
Linux)
    alias ls='ls --color=auto'  # colorful ls

    # only enable on Linux home system
    if (( ${+ZSH_HOME} )); then
        ln -sf "$HOME/.config/kitty/kitty_linux.conf" "$HOME/.config/kitty/kitty.conf"
        alias open='detach xdg-open'
    fi
    ;;
esac

{{ if eq .chezmoi.username "wuke" }}
    export LOG_DEPRECATED_DATE_OFFSET=-20
    export DOOMGITCONFIG=/etc/gitconfig
    export PATH="$PATH:/prod/tools/python-devtools/bin/share:/prod/cas/bin:/desco/systems/k8s/bin:$HOME/.config/emacs/bin:/prod/tools/infra/nodejs/node/bin:/prod/gaitech/tools:/prod/tools/infra/nodejs/node_modules/bin:/$HOME/.local/bin"

    alias tidygit='tidy-imports $(git diff HEAD --name-only | grep -e ".*py$")'
    alias cd='cd -P'
    alias pbcopy='xclip -selection clipboard'
    alias rel='/desco/group/sysdevops/bin/base_release'
    alias nvitop='/codemill/wuke/envs/wuke311/bin/nvitop'
    alias gst='git status'
    alias gd='git diff'
    alias podman='/desco/containers/bin/podman'
    alias ls='eza'
    alias gcm='git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed "s@^refs/remotes/origin/@@")'

    alias base1='export BASE_DIR=/codemill/wuke/base1 && cd /codemill/wuke/base1'
    alias base2='export BASE_DIR=/codemill/wuke/base2 && cd /codemill/wuke/base2'
    alias base3='export BASE_DIR=/codemill/wuke/base3 && cd /codemill/wuke/base3'

    function git-stash-except-test() {
        git add **/tests
        git stash push --keep-index -m "Stashing all changes except tests"
    }

    sshcd() { ssh -t "$@" "cd '$(pwd)'; zsh -l"; }
{{ end }}
